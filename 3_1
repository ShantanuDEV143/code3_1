#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>

// Global variable to count the number of comparisons
long long comparison_count = 0;

// Function to merge two halves
void merge(int arr[], int left, int mid, int right, int order) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int *L = (int *)malloc(n1 * sizeof(int));
    int *R = (int *)malloc(n2 * sizeof(int));

    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (int i = 0; i < n2; i++)
        R[i] = arr[mid + 1 + i];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        comparison_count++;
        if (order == 1) { // ascending order
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
        } else { // descending order
            if (L[i] >= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }

    free(L);
    free(R);
}

// Function to implement merge sort
void mergeSort(int arr[], int left, int right, int order) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid, order);
        mergeSort(arr, mid + 1, right, order);

        merge(arr, left, mid, right, order);
    }
}

// Function to read data from a file
void readFile(char *filename, int arr[], int *n) {
    FILE *file = fopen(filename, "r");
    if (file == NULL) {
        printf("Error opening file %s\n", filename);
        exit(1);
    }

    *n = 0;
    while (fscanf(file, "%d", &arr[*n]) != EOF) {
        (*n)++;
    }

    fclose(file);
}

// Function to write data to a file
void writeFile(char *filename, int arr[], int n) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file %s\n", filename);
        exit(1);
    }

    for (int i = 0; i < n; i++) {
        fprintf(file, "%d ", arr[i]);
    }

    fclose(file);
}

// Function to display the array
void displayArray(int arr[], int n) {
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Function to generate random numbers and write them to a file
void generateRandomNumbers(char *filename, int n) {
    FILE *file = fopen(filename, "w");
    if (file == NULL) {
        printf("Error opening file %s\n", filename);
        exit(1);
    }

    srand(time(NULL));
    for (int i = 0; i < n; i++) {
        fprintf(file, "%d ", rand() % 1000);
    }

    fclose(file);
}

int main() {
    int choice;
    int arr[500];
    int n;
    char input_filename[20], output_filename[20];
    clock_t start_time, end_time;

    // Generate random numbers for input files
    generateRandomNumbers("inAsce.dat", 500);
    generateRandomNumbers("inDesc.dat", 500);
    generateRandomNumbers("inRand.dat", 500);

    while (1) {
        printf("MAIN MENU (MERGE SORT)\n");
        printf("1. Ascending Data\n");
        printf("2. Descending Data\n");
        printf("3. Random Data\n");
        printf("4. EXIT\n");
        printf("Enter option: ");
        scanf("%d", &choice);

        int order = 1; // default to ascending order
        switch (choice) {
            case 1:
                              strcpy(input_filename, "inAsce.dat");
                strcpy(output_filename, "outMergeAsce.dat");
                break;
            case 2:
                strcpy(input_filename, "inDesc.dat");
                strcpy(output_filename, "outMergeDesc.dat");
                order = 2; // descending order
                break;
            case 3:
                strcpy(input_filename, "inRand.dat");
                strcpy(output_filename, "outMergeRand.dat");
                order = 2; // descending order
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid option. Please try again.\n");
                continue;
        }

        readFile(input_filename, arr, &n);
        printf("Before Sorting: ");
        displayArray(arr, n);

        comparison_count = 0;

        start_time = clock();
        mergeSort(arr, 0, n - 1, order);
        end_time = clock();

        printf("After Sorting: ");
        displayArray(arr, n);

        writeFile(output_filename, arr, n);

        printf("Number of Comparisons: %lld\n", comparison_count);
        printf("Execution Time: %ld nanoseconds\n", (end_time - start_time) * 1000000 / CLOCKS_PER_SEC);
    }

    return 0;
}
