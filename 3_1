                strcpy(input_filename, "inAsce.dat");
                strcpy(output_filename, "outMergeAsce.dat");
                break;
            case 2:
                strcpy(input_filename, "inDesc.dat");
                strcpy(output_filename, "outMergeDesc.dat");
                order = 2; // descending order
                break;
            case 3:
                strcpy(input_filename, "inRand.dat");
                strcpy(output_filename, "outMergeRand.dat");
                order = 2; // descending order
                break;
            case 4:
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid option. Please try again.\n");
                continue;
        }

        readFile(input_filename, arr, &n);
        printf("Before Sorting: ");
        displayArray(arr, n);

        comparison_count = 0;

        start_time = clock();
        mergeSort(arr, 0, n - 1, order);
        end_time = clock();

        printf("After Sorting: ");
        displayArray(arr, n);

        writeFile(output_filename, arr, n);

        printf("Number of Comparisons: %lld\n", comparison_count);
        printf("Execution Time: %ld nanoseconds\n", (end_time - start_time) * 1000000 / CLOCKS_PER_SEC);
    }

    return 0;
}
